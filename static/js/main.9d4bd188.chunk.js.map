{"version":3,"sources":["Common/Components/ErrorComponent.js","Routes.js","App.js","index.js"],"names":["ErrorComponent","errorMessage","Typography","Link","href","Login","lazy","Home","checkUserLoggedIn","localStorage","getItem","AuthRoute","Component","component","rest","allowedFor","console","log","render","props","Routes","fallback","exact","path","to","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"qPAeeA,EAZQ,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACxB,OACE,oCACE,kBAACC,EAAA,EAAD,0BACcD,GACZ,6BACA,kBAACE,EAAA,EAAD,CAAMC,KAAK,KAAX,uBCLFC,EAAQC,gBAAK,kBAAM,8DAEnBC,EAAOD,gBAAK,kBAAM,8DAIXE,EAAoB,mBAAQC,aAAaC,QAAQ,aAExDC,EAAY,SAAC,GAAwD,IAA3CC,EAA0C,EAArDC,UAA0CC,GAAW,EAA/BC,WAA+B,2CAExE,OADAC,QAAQC,IAAI,oBAAqBT,KAE/B,kBAAC,IAAD,iBACMM,EADN,CAEEI,OAAQ,SAACC,GAAD,OACNX,IACE,kBAACI,EAAcO,GAEf,kBAAC,EAAD,CAAgBlB,aAAa,uBAgCxBmB,EAjBA,kBACb,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,mDAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIL,OAAQ,kBAAM,kBAAC,IAAD,CAAUM,GAAG,cACjD,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,SAASL,OAAQ,kBAAM,kBAACb,EAAD,SACzC,kBAAC,EAAD,CAAWiB,OAAK,EAACC,KAAK,QAAQV,UAAWN,IAEzC,kBAAC,IAAD,CACEgB,KAAK,IACLL,OAAQ,kBAAM,kBAAC,EAAD,CAAgBjB,aAAa,yBCnCtCwB,EARH,WACV,OACE,oCACE,kBAAC,EAAD,QCANC,IAASR,OACP,kBAAC,IAAMS,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.9d4bd188.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link, Typography } from '@material-ui/core';\r\n\r\nconst ErrorComponent = ({ errorMessage }) => {\r\n  return (\r\n    <>\r\n      <Typography>\r\n        Error - {`${errorMessage}`}\r\n        <br />\r\n        <Link href=\"#\">Go to Login Page</Link>\r\n      </Typography>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ErrorComponent;\r\n","import React, { Suspense, lazy } from 'react';\r\nimport { Route, Switch, Redirect, HashRouter } from 'react-router-dom';\r\nimport ErrorComponent from './Common/Components/ErrorComponent';\r\n\r\nconst Login = lazy(() => import(/* webpackChunkName: \"Login\" */ './Login'));\r\n\r\nconst Home = lazy(() => import(/* webpackChunkName: \"Home\" */ './Home'));\r\n\r\n// const NoMatch = lazy(() => import('./NoMatch'));\r\n\r\nexport const checkUserLoggedIn = () => !!localStorage.getItem('userName');\r\n\r\nconst AuthRoute = ({ component: Component, allowedFor = [], ...rest }) => {\r\n  console.log('checkUserLoggedIn', checkUserLoggedIn());\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        checkUserLoggedIn() ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <ErrorComponent errorMessage=\"Access denied\" />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\n/* Using HashRouter because GitHub Pages doesnâ€™t support routers \r\nthat use the HTML5 `pushState` history API under the hood \r\n(for example, React Router using `browserHistory`) so if you refresh the \r\nBrowser Page it gives a 404 Error page. \r\nThis is because when there is a fresh page load for a url like \r\n`http://user.github.io/todomvc/todos/42`, where `/todos/42` is a frontend route, \r\nthe GitHub Pages server returns 404 because it knows nothing of `/todos/42`.\r\n*/\r\nconst Routes = () => (\r\n  <HashRouter>\r\n    <Suspense fallback={<>Loading...</>}>\r\n      <Switch>\r\n        <Route exact path=\"/\" render={() => <Redirect to=\"/login\" />} />\r\n        <Route exact path=\"/login\" render={() => <Login />} />\r\n        <AuthRoute exact path=\"/home\" component={Home} />\r\n\r\n        <Route\r\n          path=\"*\"\r\n          render={() => <ErrorComponent errorMessage=\"Incorrect URL\" />}\r\n        />\r\n      </Switch>\r\n    </Suspense>\r\n  </HashRouter>\r\n);\r\n\r\nexport default Routes;\r\n","import React from 'react';\r\nimport Routes from './Routes';\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <Routes />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import 'react-app-polyfill/stable';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}